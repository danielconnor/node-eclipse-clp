
xor(+Number1, +Number2, ?Result)

   Evaluates the bitwise exclusive disjunction Number1 xor Number2 and unifies
the resulting value with Result.



Arguments
   +Number1            Integer.
   +Number2            Integer.
   ?Result             A variable or integer.

Type
   Arithmetic

Description
   This predicate is used by the ECLiPSe compiler to expand evaluable
   arithmetic expressions.  So the call to xor(Number1, Number2, Result) is
   equivalent to

    Result is xor(Number1, Number2)

    which should be preferred for portability.

   In coroutining mode, if Number1 or Number2 are free variables, the call
   to xor/3 is delayed until these variables are instantiated.




Resatisfiable
      No

Fail Conditions
      Fails if the result of the evaluation does not unify with Result.



Exceptions
     4 --- Number1 or Number2 is not instantiated (non-coroutining mode    only).
     5 --- Result is a number but not an integer.
     5 --- Number1 or Number2 is a number but not an integer.
    24 --- Number1 or Number2 is not of a numeric type.
    24 --- Result is neither a number nor a variable.

Examples
   
Success:
      xor(11, 7, 12).
      xor(11, -7, Result).     (gives Result = -14)
Fail:
      xor(1, 2, 4).
Error:
      xor(A, 2, 6).              (Error 4).
      xor(6, 2.0, 4.0).          (Error 5).
      xor(4 + 2, 2, 4).          (Error 24).
      xor(5, 2, r).              (Error 24).





See Also
   is / 2
